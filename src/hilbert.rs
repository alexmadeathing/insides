// ANTI-CAPITALIST SOFTWARE LICENSE (v 1.4)
//
// Copyright Â© 2022 Alex Blunt (alexmadeathing)
//
// This is anti-capitalist software, released for free use by individuals and
// organizations that do not operate by capitalist principles.
//
// Permission is hereby granted, free of charge, to any person or organization
// (the "User") obtaining a copy of this software and associated documentation
// files (the "Software"), to use, copy, modify, merge, distribute, and/or sell
// copies of the Software, subject to the following conditions:
//
// 1. The above copyright notice and this permission notice shall be included in
// all copies or modified versions of the Software.
//
// 2. The User is one of the following:
//   a. An individual person, laboring for themselves
//   b. A non-profit organization
//   c. An educational institution
//   d. An organization that seeks shared profit for all of its members, and
//      allows non-members to set the cost of their labor
//
// 3. If the User is an organization with owners, then all owners are workers
// and all workers are owners with equal equity and/or equal vote.
//
// 4. If the User is an organization, then the User is not law enforcement or
// military, or working for or under either.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY
// KIND, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

use dilate::*;

use super::{Coord, SpaceFillingCurve, Index, Neighbours, QueryDirection, Siblings};

use crate::{internal::NumTraits, Morton};

#[cfg(all(feature = "tiny_lut", not(feature = "small_lut")))]
mod tiny_lut {
    const GRAY_LUT: [u8; 16] = [
        00, 01, 03, 02, 06, 07, 05, 04, 12, 13, 15, 14, 10, 11, 09, 08,
    ];

    const GRAY_INV_LUT: [u8; 16] = [
        00, 01, 03, 02, 07, 06, 04, 05, 15, 14, 12, 13, 08, 09, 11, 10,
    ];

    const ROTATION_TRANSFORM_LUT: [u8; 16] = [
        00, 01, 01, 02, 02, 01, 01, 03, 03, 01, 01, 02, 02, 01, 01, 04,
    ];

    const AXIS_TRANSFORM_LUT: [u8; 16] = [
        00, 00, 00, 03, 03, 06, 06, 05, 05, 12, 12, 15, 15, 10, 10, 09,
    ];
}

#[cfg(all(feature = "small_lut", not(feature = "tiny_lut")))]
mod small_lut {
    const GRAY_LUT: [u8; 64] = [
        00, 01, 03, 02, 06, 07, 05, 04, 12, 13, 15, 14, 10, 11, 09, 08,
        24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16,
        48, 49, 51, 50, 54, 55, 53, 52, 60, 61, 63, 62, 58, 59, 57, 56,
        40, 41, 43, 42, 46, 47, 45, 44, 36, 37, 39, 38, 34, 35, 33, 32,
    ];

    const GRAY_INV_LUT: [u8; 64] = [
        00, 01, 03, 02, 07, 06, 04, 05, 15, 14, 12, 13, 08, 09, 11, 10,
        31, 30, 28, 29, 24, 25, 27, 26, 16, 17, 19, 18, 23, 22, 20, 21,
        63, 62, 60, 61, 56, 57, 59, 58, 48, 49, 51, 50, 55, 54, 52, 53,
        32, 33, 35, 34, 39, 38, 36, 37, 47, 46, 44, 45, 40, 41, 43, 42,
    ];

    const ROTATION_TRANSFORM_LUT: [u8; 64] = [
        00, 01, 01, 02, 02, 01, 01, 03, 03, 01, 01, 02, 02, 01, 01, 04,
        04, 01, 01, 02, 02, 01, 01, 03, 03, 01, 01, 02, 02, 01, 01, 05,
        05, 01, 01, 02, 02, 01, 01, 03, 03, 01, 01, 02, 02, 01, 01, 04,
        04, 01, 01, 02, 02, 01, 01, 03, 03, 01, 01, 02, 02, 01, 01, 06,
    ];

    const AXIS_TRANSFORM_LUT: [u8; 64] = [
        00, 00, 00, 03, 03, 06, 06, 05, 05, 12, 12, 15, 15, 10, 10, 09,
        09, 24, 24, 27, 27, 30, 30, 29, 29, 20, 20, 23, 23, 18, 18, 17,
        17, 48, 48, 51, 51, 54, 54, 53, 53, 60, 60, 63, 63, 58, 58, 57,
        57, 40, 40, 43, 43, 46, 46, 45, 45, 36, 36, 39, 39, 34, 34, 33,
    ];
}

mod static_lut {
    pub const TRANSFORM_LUT_D2: [[u8; 4]; 4] = [
        [1, 0, 0, 2],
        [0, 1, 1, 3],
        [3, 2, 2, 0],
        [2, 3, 3, 1],
    ];
    
    pub const MORTON_LUT_D2: [[u8; 4]; 4] = [
        [0, 2, 3, 1],
        [0, 1, 3, 2],
        [3, 2, 0, 1],
        [3, 1, 0, 2],
    ];
    
    pub const HILBERT_LUT_D2: [[u8; 4]; 4] = [
        [0, 3, 1, 2],
        [0, 1, 3, 2],
        [2, 3, 1, 0],
        [2, 1, 3, 0],
    ];
    
    pub const TRANSFORM_LUT_D3: [[u8; 8]; 12] = [
        [2, 1, 1, 6, 6, 7, 7, 8],
        [0, 2, 2, 3, 3, 4, 4, 5],
        [1, 0, 0, 9, 9, 10, 10, 11],
        [10, 8, 8, 1, 1, 9, 9, 6],
        [11, 6, 6, 8, 8, 5, 5, 1],
        [9, 7, 7, 10, 10, 1, 1, 4],
        [4, 11, 11, 0, 0, 3, 3, 9],
        [5, 9, 9, 11, 11, 8, 8, 0],
        [3, 10, 10, 4, 4, 0, 0, 7],
        [7, 5, 5, 2, 2, 6, 6, 3],
        [8, 3, 3, 5, 5, 11, 11, 2],
        [6, 4, 4, 7, 7, 2, 2, 10],
    ];
    
    pub const MORTON_LUT_D3: [[u8; 8]; 12] = [
        [0, 4, 5, 1, 3, 7, 6, 2],
        [0, 2, 6, 4, 5, 7, 3, 1],
        [0, 1, 3, 2, 6, 7, 5, 4],
        [6, 4, 0, 2, 3, 1, 5, 7],
        [5, 4, 6, 7, 3, 2, 0, 1],
        [3, 7, 6, 2, 0, 4, 5, 1],
        [5, 1, 0, 4, 6, 2, 3, 7],
        [3, 1, 5, 7, 6, 4, 0, 2],
        [6, 7, 5, 4, 0, 1, 3, 2],
        [3, 2, 0, 1, 5, 4, 6, 7],
        [6, 2, 3, 7, 5, 1, 0, 4],
        [5, 7, 3, 1, 0, 2, 6, 4],
    ];
    
    pub const HILBERT_LUT_D3: [[u8; 8]; 12] = [
        [0, 3, 7, 4, 1, 2, 6, 5],
        [0, 7, 1, 6, 3, 4, 2, 5],
        [0, 1, 3, 2, 7, 6, 4, 5],
        [2, 5, 3, 4, 1, 6, 0, 7],
        [6, 7, 5, 4, 1, 0, 2, 3],
        [4, 7, 3, 0, 5, 6, 2, 1],
        [2, 1, 5, 6, 3, 0, 4, 7],
        [6, 1, 7, 0, 5, 2, 4, 3],
        [4, 5, 7, 6, 3, 2, 0, 1],
        [2, 3, 1, 0, 5, 4, 6, 7],
        [6, 5, 1, 2, 7, 4, 0, 3],
        [4, 3, 5, 2, 7, 0, 6, 1],
    ];
    
    pub const TRANSFORM_LUT_D4: [[u8; 16]; 32] = [
        [3, 2, 2, 28, 28, 19, 19, 29, 29, 23, 23, 30, 30, 21, 21, 27],
        [0, 3, 3, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17],
        [1, 0, 0, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10],
        [2, 1, 1, 18, 18, 24, 24, 25, 25, 22, 22, 31, 31, 20, 20, 26],
        [23, 24, 24, 9, 9, 1, 1, 14, 14, 20, 20, 7, 7, 22, 22, 15],
        [27, 11, 11, 13, 13, 15, 15, 17, 17, 6, 6, 10, 10, 26, 26, 3],
        [20, 29, 29, 27, 27, 17, 17, 2, 2, 18, 18, 25, 25, 31, 31, 28],
        [12, 26, 26, 1, 1, 6, 6, 18, 18, 15, 15, 24, 24, 11, 11, 25],
        [15, 30, 30, 5, 5, 28, 28, 16, 16, 10, 10, 0, 0, 13, 13, 23],
        [25, 21, 21, 22, 22, 23, 23, 31, 31, 19, 19, 20, 20, 2, 2, 12],
        [18, 14, 14, 15, 15, 16, 16, 24, 24, 3, 3, 11, 11, 12, 12, 9],
        [22, 5, 5, 16, 16, 0, 0, 23, 23, 9, 9, 14, 14, 7, 7, 30],
        [26, 28, 28, 29, 29, 30, 30, 27, 27, 13, 13, 17, 17, 10, 10, 2],
        [9, 25, 25, 26, 26, 27, 27, 1, 1, 4, 4, 6, 6, 8, 8, 18],
        [19, 10, 10, 0, 0, 13, 13, 4, 4, 30, 30, 5, 5, 28, 28, 6],
        [30, 31, 31, 12, 12, 18, 18, 21, 21, 17, 17, 3, 3, 29, 29, 22],
        [6, 20, 20, 7, 7, 22, 22, 8, 8, 24, 24, 9, 9, 1, 1, 19],
        [4, 23, 23, 30, 30, 21, 21, 5, 5, 2, 2, 28, 28, 19, 19, 16],
        [14, 19, 19, 20, 20, 2, 2, 7, 7, 21, 21, 22, 22, 23, 23, 8],
        [10, 18, 18, 25, 25, 31, 31, 26, 26, 29, 29, 27, 27, 17, 17, 1],
        [29, 16, 16, 23, 23, 14, 14, 30, 30, 12, 12, 21, 21, 3, 3, 5],
        [13, 9, 9, 14, 14, 7, 7, 15, 15, 5, 5, 16, 16, 0, 0, 24],
        [5, 27, 27, 2, 2, 25, 25, 28, 28, 8, 8, 19, 19, 4, 4, 29],
        [24, 17, 17, 3, 3, 29, 29, 11, 11, 31, 31, 12, 12, 18, 18, 13],
        [17, 4, 4, 6, 6, 8, 8, 10, 10, 25, 25, 26, 26, 27, 27, 0],
        [21, 13, 13, 17, 17, 10, 10, 3, 3, 28, 28, 29, 29, 30, 30, 11],
        [28, 7, 7, 8, 8, 9, 9, 19, 19, 0, 0, 4, 4, 5, 5, 20],
        [11, 22, 22, 31, 31, 20, 20, 12, 12, 1, 1, 18, 18, 24, 24, 21],
        [7, 12, 12, 21, 21, 3, 3, 22, 22, 16, 16, 23, 23, 14, 14, 31],
        [16, 6, 6, 10, 10, 26, 26, 0, 0, 11, 11, 13, 13, 15, 15, 4],
        [31, 8, 8, 19, 19, 4, 4, 20, 20, 27, 27, 2, 2, 25, 25, 7],
        [8, 15, 15, 24, 24, 11, 11, 9, 9, 26, 26, 1, 1, 6, 6, 14],
    ];
    
    pub const MORTON_LUT_D4: [[u8; 16]; 32] = [
        [0, 8, 9, 1, 3, 11, 10, 2, 6, 14, 15, 7, 5, 13, 12, 4],
        [0, 4, 12, 8, 9, 13, 5, 1, 3, 7, 15, 11, 10, 14, 6, 2],
        [0, 2, 6, 4, 12, 14, 10, 8, 9, 11, 15, 13, 5, 7, 3, 1],
        [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8],
        [6, 7, 5, 4, 0, 1, 3, 2, 10, 11, 9, 8, 12, 13, 15, 14],
        [12, 4, 5, 13, 15, 7, 6, 14, 10, 2, 3, 11, 9, 1, 0, 8],
        [10, 8, 12, 14, 6, 4, 0, 2, 3, 1, 5, 7, 15, 13, 9, 11],
        [9, 1, 0, 8, 10, 2, 3, 11, 15, 7, 6, 14, 12, 4, 5, 13],
        [15, 14, 12, 13, 9, 8, 10, 11, 3, 2, 0, 1, 5, 4, 6, 7],
        [5, 13, 12, 4, 6, 14, 15, 7, 3, 11, 10, 2, 0, 8, 9, 1],
        [3, 7, 15, 11, 10, 14, 6, 2, 0, 4, 12, 8, 9, 13, 5, 1],
        [12, 14, 10, 8, 0, 2, 6, 4, 5, 7, 3, 1, 9, 11, 15, 13],
        [9, 8, 10, 11, 15, 14, 12, 13, 5, 4, 6, 7, 3, 2, 0, 1],
        [5, 1, 9, 13, 12, 8, 0, 4, 6, 2, 10, 14, 15, 11, 3, 7],
        [3, 2, 0, 1, 5, 4, 6, 7, 15, 14, 12, 13, 9, 8, 10, 11],
        [15, 13, 9, 11, 3, 1, 5, 7, 6, 4, 0, 2, 10, 8, 12, 14],
        [10, 11, 9, 8, 12, 13, 15, 14, 6, 7, 5, 4, 0, 1, 3, 2],
        [6, 14, 15, 7, 5, 13, 12, 4, 0, 8, 9, 1, 3, 11, 10, 2],
        [3, 11, 10, 2, 0, 8, 9, 1, 5, 13, 12, 4, 6, 14, 15, 7],
        [3, 1, 5, 7, 15, 13, 9, 11, 10, 8, 12, 14, 6, 4, 0, 2],
        [10, 14, 6, 2, 3, 7, 15, 11, 9, 13, 5, 1, 0, 4, 12, 8],
        [5, 7, 3, 1, 9, 11, 15, 13, 12, 14, 10, 8, 0, 2, 6, 4],
        [12, 8, 0, 4, 5, 1, 9, 13, 15, 11, 3, 7, 6, 2, 10, 14],
        [6, 4, 0, 2, 10, 8, 12, 14, 15, 13, 9, 11, 3, 1, 5, 7],
        [6, 2, 10, 14, 15, 11, 3, 7, 5, 1, 9, 13, 12, 8, 0, 4],
        [5, 4, 6, 7, 3, 2, 0, 1, 9, 8, 10, 11, 15, 14, 12, 13],
        [9, 11, 15, 13, 5, 7, 3, 1, 0, 2, 6, 4, 12, 14, 10, 8],
        [12, 13, 15, 14, 10, 11, 9, 8, 0, 1, 3, 2, 6, 7, 5, 4],
        [9, 13, 5, 1, 0, 4, 12, 8, 10, 14, 6, 2, 3, 7, 15, 11],
        [10, 2, 3, 11, 9, 1, 0, 8, 12, 4, 5, 13, 15, 7, 6, 14],
        [15, 11, 3, 7, 6, 2, 10, 14, 12, 8, 0, 4, 5, 1, 9, 13],
        [15, 7, 6, 14, 12, 4, 5, 13, 9, 1, 0, 8, 10, 2, 3, 11],
    ];
    
    pub const HILBERT_LUT_D4: [[u8; 16]; 32] = [
        [0, 3, 7, 4, 15, 12, 8, 11, 1, 2, 6, 5, 14, 13, 9, 10],
        [0, 7, 15, 8, 1, 6, 14, 9, 3, 4, 12, 11, 2, 5, 13, 10],
        [0, 15, 1, 14, 3, 12, 2, 13, 7, 8, 6, 9, 4, 11, 5, 10],
        [0, 1, 3, 2, 7, 6, 4, 5, 15, 14, 12, 13, 8, 9, 11, 10],
        [4, 5, 7, 6, 3, 2, 0, 1, 11, 10, 8, 9, 12, 13, 15, 14],
        [14, 13, 9, 10, 1, 2, 6, 5, 15, 12, 8, 11, 0, 3, 7, 4],
        [6, 9, 7, 8, 5, 10, 4, 11, 1, 14, 0, 15, 2, 13, 3, 12],
        [2, 1, 5, 6, 13, 14, 10, 9, 3, 0, 4, 7, 12, 15, 11, 8],
        [10, 11, 9, 8, 13, 12, 14, 15, 5, 4, 6, 7, 2, 3, 1, 0],
        [12, 15, 11, 8, 3, 0, 4, 7, 13, 14, 10, 9, 2, 1, 5, 6],
        [8, 15, 7, 0, 9, 14, 6, 1, 11, 12, 4, 3, 10, 13, 5, 2],
        [4, 11, 5, 10, 7, 8, 6, 9, 3, 12, 2, 13, 0, 15, 1, 14],
        [14, 15, 13, 12, 9, 8, 10, 11, 1, 0, 2, 3, 6, 7, 5, 4],
        [6, 1, 9, 14, 7, 0, 8, 15, 5, 2, 10, 13, 4, 3, 11, 12],
        [2, 3, 1, 0, 5, 4, 6, 7, 13, 12, 14, 15, 10, 11, 9, 8],
        [10, 5, 11, 4, 9, 6, 8, 7, 13, 2, 12, 3, 14, 1, 15, 0],
        [12, 13, 15, 14, 11, 10, 8, 9, 3, 2, 0, 1, 4, 5, 7, 6],
        [8, 11, 15, 12, 7, 4, 0, 3, 9, 10, 14, 13, 6, 5, 1, 2],
        [4, 7, 3, 0, 11, 8, 12, 15, 5, 6, 2, 1, 10, 9, 13, 14],
        [14, 1, 15, 0, 13, 2, 12, 3, 9, 6, 8, 7, 10, 5, 11, 4],
        [12, 11, 3, 4, 13, 10, 2, 5, 15, 8, 0, 7, 14, 9, 1, 6],
        [12, 3, 13, 2, 15, 0, 14, 1, 11, 4, 10, 5, 8, 7, 9, 6],
        [2, 5, 13, 10, 3, 4, 12, 11, 1, 6, 14, 9, 0, 7, 15, 8],
        [2, 13, 3, 12, 1, 14, 0, 15, 5, 10, 4, 11, 6, 9, 7, 8],
        [14, 9, 1, 6, 15, 8, 0, 7, 13, 10, 2, 5, 12, 11, 3, 4],
        [6, 7, 5, 4, 1, 0, 2, 3, 9, 8, 10, 11, 14, 15, 13, 12],
        [8, 7, 9, 6, 11, 4, 10, 5, 15, 0, 14, 1, 12, 3, 13, 2],
        [8, 9, 11, 10, 15, 14, 12, 13, 7, 6, 4, 5, 0, 1, 3, 2],
        [4, 3, 11, 12, 5, 2, 10, 13, 7, 0, 8, 15, 6, 1, 9, 14],
        [6, 5, 1, 2, 9, 10, 14, 13, 7, 4, 0, 3, 8, 11, 15, 12],
        [10, 13, 5, 2, 11, 12, 4, 3, 9, 14, 6, 1, 8, 15, 7, 0],
        [10, 9, 13, 14, 5, 6, 2, 1, 11, 8, 12, 15, 4, 7, 3, 0],
    ];
    
    pub const TRANSFORM_LUT_D5: [[u8; 32]; 80] = [
        [4, 3, 3, 74, 74, 61, 61, 75, 75, 59, 59, 76, 76, 57, 57, 54, 54, 69, 69, 77, 77, 67, 67, 78, 78, 65, 65, 79, 79, 63, 63, 55],
        [0, 4, 4, 40, 40, 41, 41, 70, 70, 36, 36, 37, 37, 38, 38, 71, 71, 46, 46, 47, 47, 48, 48, 73, 73, 42, 42, 43, 43, 44, 44, 56],
        [1, 0, 0, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34],
        [2, 1, 1, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19],
        [3, 2, 2, 35, 35, 49, 49, 50, 50, 45, 45, 72, 72, 39, 39, 51, 51, 64, 64, 66, 66, 68, 68, 52, 52, 58, 58, 60, 60, 62, 62, 53],
        [46, 59, 59, 76, 76, 57, 57, 10, 10, 3, 3, 74, 74, 61, 61, 31, 31, 65, 65, 79, 79, 63, 63, 8, 8, 69, 69, 77, 77, 67, 67, 32],
        [56, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 7, 7, 11, 11, 15, 15, 19, 19, 51, 51, 53, 53, 55, 55, 0],
        [65, 39, 39, 16, 16, 45, 45, 17, 17, 49, 49, 18, 18, 2, 2, 36, 36, 62, 62, 12, 12, 58, 58, 13, 13, 68, 68, 14, 14, 64, 64, 37],
        [21, 55, 55, 3, 3, 51, 51, 74, 74, 15, 15, 61, 61, 7, 7, 75, 75, 32, 32, 59, 59, 28, 28, 76, 76, 24, 24, 57, 57, 20, 20, 54],
        [32, 47, 47, 73, 73, 43, 43, 6, 6, 40, 40, 70, 70, 37, 37, 33, 33, 11, 11, 19, 19, 53, 53, 1, 1, 22, 22, 26, 26, 30, 30, 46],
        [54, 44, 44, 69, 69, 42, 42, 77, 77, 48, 48, 67, 67, 46, 46, 78, 78, 38, 38, 65, 65, 36, 36, 79, 79, 41, 41, 63, 63, 4, 4, 21],
        [62, 75, 75, 54, 54, 78, 78, 55, 55, 71, 71, 56, 56, 34, 34, 3, 3, 35, 35, 50, 50, 72, 72, 51, 51, 66, 66, 52, 52, 60, 60, 74],
        [23, 41, 41, 63, 63, 4, 4, 64, 64, 38, 38, 65, 65, 36, 36, 66, 66, 48, 48, 67, 67, 46, 46, 68, 68, 44, 44, 69, 69, 42, 42, 52],
        [48, 30, 30, 49, 49, 22, 22, 18, 18, 53, 53, 2, 2, 11, 11, 27, 27, 37, 37, 39, 39, 40, 40, 16, 16, 43, 43, 45, 45, 47, 47, 28],
        [52, 24, 24, 57, 57, 20, 20, 58, 58, 32, 32, 59, 59, 28, 28, 60, 60, 15, 15, 61, 61, 7, 7, 62, 62, 55, 55, 3, 3, 51, 51, 23],
        [37, 79, 79, 8, 8, 77, 77, 9, 9, 76, 76, 10, 10, 74, 74, 38, 38, 19, 19, 1, 1, 26, 26, 5, 5, 73, 73, 6, 6, 70, 70, 65],
        [25, 51, 51, 53, 53, 55, 55, 2, 2, 7, 7, 11, 11, 15, 15, 35, 35, 28, 28, 30, 30, 32, 32, 49, 49, 20, 20, 22, 22, 24, 24, 50],
        [28, 67, 67, 68, 68, 69, 69, 14, 14, 63, 63, 64, 64, 65, 65, 29, 29, 61, 61, 62, 62, 3, 3, 12, 12, 57, 57, 58, 58, 59, 59, 48],
        [50, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 72, 72, 36, 36, 37, 37, 38, 38, 39, 39, 4, 4, 40, 40, 41, 41, 25],
        [35, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 49, 49, 0, 0, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 18],
        [69, 45, 45, 72, 72, 39, 39, 25, 25, 2, 2, 35, 35, 49, 49, 42, 42, 58, 58, 60, 60, 62, 62, 23, 23, 64, 64, 66, 66, 68, 68, 43],
        [55, 40, 40, 70, 70, 37, 37, 71, 71, 47, 47, 73, 73, 43, 43, 56, 56, 22, 22, 26, 26, 30, 30, 34, 34, 11, 11, 19, 19, 53, 53, 4],
        [58, 10, 10, 31, 31, 8, 8, 32, 32, 6, 6, 33, 33, 1, 1, 59, 59, 18, 18, 27, 27, 16, 16, 28, 28, 14, 14, 29, 29, 12, 12, 76],
        [41, 53, 53, 2, 2, 11, 11, 35, 35, 30, 30, 49, 49, 22, 22, 50, 50, 43, 43, 45, 45, 47, 47, 72, 72, 37, 37, 39, 39, 40, 40, 51],
        [43, 77, 77, 78, 78, 79, 79, 21, 21, 74, 74, 75, 75, 76, 76, 44, 44, 26, 26, 34, 34, 19, 19, 0, 0, 70, 70, 71, 71, 73, 73, 69],
        [51, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 52, 52, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 3, 3, 41],
        [18, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 2, 2, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15, 17, 17, 35],
        [36, 61, 61, 62, 62, 3, 3, 12, 12, 57, 57, 58, 58, 59, 59, 13, 13, 67, 67, 68, 68, 69, 69, 14, 14, 63, 63, 64, 64, 65, 65, 15],
        [67, 73, 73, 6, 6, 70, 70, 33, 33, 19, 19, 1, 1, 26, 26, 46, 46, 76, 76, 10, 10, 74, 74, 31, 31, 79, 79, 8, 8, 77, 77, 47],
        [15, 37, 37, 39, 39, 40, 40, 16, 16, 43, 43, 45, 45, 47, 47, 17, 17, 30, 30, 49, 49, 22, 22, 18, 18, 53, 53, 2, 2, 11, 11, 36],
        [76, 60, 60, 23, 23, 66, 66, 24, 24, 72, 72, 25, 25, 35, 35, 57, 57, 34, 34, 0, 0, 71, 71, 20, 20, 78, 78, 21, 21, 75, 75, 58],
        [38, 11, 11, 19, 19, 53, 53, 1, 1, 22, 22, 26, 26, 30, 30, 5, 5, 47, 47, 73, 73, 43, 43, 6, 6, 40, 40, 70, 70, 37, 37, 7],
        [47, 68, 68, 14, 14, 64, 64, 29, 29, 62, 62, 12, 12, 58, 58, 48, 48, 49, 49, 18, 18, 2, 2, 27, 27, 39, 39, 16, 16, 45, 45, 67],
        [7, 65, 65, 79, 79, 63, 63, 8, 8, 69, 69, 77, 77, 67, 67, 9, 9, 59, 59, 76, 76, 57, 57, 10, 10, 3, 3, 74, 74, 61, 61, 38],
        [5, 46, 46, 47, 47, 48, 48, 73, 73, 42, 42, 43, 43, 44, 44, 6, 6, 4, 4, 40, 40, 41, 41, 70, 70, 36, 36, 37, 37, 38, 38, 33],
        [27, 36, 36, 37, 37, 38, 38, 39, 39, 4, 4, 40, 40, 41, 41, 16, 16, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 17],
        [61, 19, 19, 1, 1, 26, 26, 5, 5, 73, 73, 6, 6, 70, 70, 7, 7, 79, 79, 8, 8, 77, 77, 9, 9, 76, 76, 10, 10, 74, 74, 11],
        [79, 66, 66, 52, 52, 60, 60, 41, 41, 35, 35, 50, 50, 72, 72, 63, 63, 71, 71, 56, 56, 34, 34, 4, 4, 75, 75, 54, 54, 78, 78, 64],
        [11, 62, 62, 12, 12, 58, 58, 13, 13, 68, 68, 14, 14, 64, 64, 15, 15, 39, 39, 16, 16, 45, 45, 17, 17, 49, 49, 18, 18, 2, 2, 61],
        [71, 33, 33, 46, 46, 31, 31, 47, 47, 29, 29, 48, 48, 27, 27, 73, 73, 25, 25, 42, 42, 23, 23, 43, 43, 21, 21, 44, 44, 0, 0, 6],
        [64, 8, 8, 9, 9, 10, 10, 38, 38, 1, 1, 5, 5, 6, 6, 65, 65, 16, 16, 17, 17, 18, 18, 36, 36, 12, 12, 13, 13, 14, 14, 79],
        [53, 74, 74, 75, 75, 76, 76, 54, 54, 77, 77, 78, 78, 79, 79, 55, 55, 70, 70, 71, 71, 73, 73, 56, 56, 26, 26, 34, 34, 19, 19, 3],
        [57, 26, 26, 34, 34, 19, 19, 0, 0, 70, 70, 71, 71, 73, 73, 20, 20, 77, 77, 78, 78, 79, 79, 21, 21, 74, 74, 75, 75, 76, 76, 22],
        [77, 14, 14, 29, 29, 12, 12, 48, 48, 18, 18, 27, 27, 16, 16, 67, 67, 6, 6, 33, 33, 1, 1, 46, 46, 10, 10, 31, 31, 8, 8, 68],
        [22, 58, 58, 60, 60, 62, 62, 23, 23, 64, 64, 66, 66, 68, 68, 24, 24, 45, 45, 72, 72, 39, 39, 25, 25, 2, 2, 35, 35, 49, 49, 57],
        [6, 56, 56, 4, 4, 54, 54, 40, 40, 52, 52, 41, 41, 50, 50, 70, 70, 17, 17, 36, 36, 13, 13, 37, 37, 9, 9, 38, 38, 5, 5, 71],
        [59, 49, 49, 18, 18, 2, 2, 27, 27, 39, 39, 16, 16, 45, 45, 28, 28, 68, 68, 14, 14, 64, 64, 29, 29, 62, 62, 12, 12, 58, 58, 30],
        [68, 78, 78, 21, 21, 75, 75, 44, 44, 34, 34, 0, 0, 71, 71, 69, 69, 72, 72, 25, 25, 35, 35, 42, 42, 60, 60, 23, 23, 66, 66, 77],
        [30, 76, 76, 10, 10, 74, 74, 31, 31, 79, 79, 8, 8, 77, 77, 32, 32, 73, 73, 6, 6, 70, 70, 33, 33, 19, 19, 1, 1, 26, 26, 59],
        [34, 5, 5, 7, 7, 9, 9, 11, 11, 13, 13, 15, 15, 17, 17, 19, 19, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 1],
        [42, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 3, 3, 23, 23, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 24],
        [63, 70, 70, 71, 71, 73, 73, 56, 56, 26, 26, 34, 34, 19, 19, 4, 4, 74, 74, 75, 75, 76, 76, 54, 54, 77, 77, 78, 78, 79, 79, 40],
        [24, 43, 43, 45, 45, 47, 47, 72, 72, 37, 37, 39, 39, 40, 40, 25, 25, 53, 53, 2, 2, 11, 11, 35, 35, 30, 30, 49, 49, 22, 22, 42],
        [74, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 61, 61, 1, 1, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 62],
        [44, 22, 22, 26, 26, 30, 30, 34, 34, 11, 11, 19, 19, 53, 53, 0, 0, 40, 40, 70, 70, 37, 37, 71, 71, 47, 47, 73, 73, 43, 43, 20],
        [40, 64, 64, 66, 66, 68, 68, 52, 52, 58, 58, 60, 60, 62, 62, 41, 41, 2, 2, 35, 35, 49, 49, 50, 50, 45, 45, 72, 72, 39, 39, 63],
        [20, 69, 69, 77, 77, 67, 67, 78, 78, 65, 65, 79, 79, 63, 63, 21, 21, 3, 3, 74, 74, 61, 61, 75, 75, 59, 59, 76, 76, 57, 57, 44],
        [26, 18, 18, 27, 27, 16, 16, 28, 28, 14, 14, 29, 29, 12, 12, 30, 30, 10, 10, 31, 31, 8, 8, 32, 32, 6, 6, 33, 33, 1, 1, 49],
        [10, 54, 54, 55, 55, 56, 56, 3, 3, 50, 50, 51, 51, 52, 52, 74, 74, 13, 13, 15, 15, 17, 17, 61, 61, 5, 5, 7, 7, 9, 9, 75],
        [49, 34, 34, 0, 0, 71, 71, 20, 20, 78, 78, 21, 21, 75, 75, 22, 22, 60, 60, 23, 23, 66, 66, 24, 24, 72, 72, 25, 25, 35, 35, 26],
        [13, 48, 48, 67, 67, 46, 46, 68, 68, 44, 44, 69, 69, 42, 42, 14, 14, 41, 41, 63, 63, 4, 4, 64, 64, 38, 38, 65, 65, 36, 36, 29],
        [19, 35, 35, 50, 50, 72, 72, 51, 51, 66, 66, 52, 52, 60, 60, 53, 53, 75, 75, 54, 54, 78, 78, 55, 55, 71, 71, 56, 56, 34, 34, 2],
        [75, 31, 31, 32, 32, 33, 33, 59, 59, 27, 27, 28, 28, 29, 29, 76, 76, 23, 23, 24, 24, 25, 25, 57, 57, 0, 0, 20, 20, 21, 21, 10],
        [70, 16, 16, 17, 17, 18, 18, 36, 36, 12, 12, 13, 13, 14, 14, 37, 37, 8, 8, 9, 9, 10, 10, 38, 38, 1, 1, 5, 5, 6, 6, 39],
        [8, 21, 21, 44, 44, 0, 0, 69, 69, 25, 25, 42, 42, 23, 23, 77, 77, 29, 29, 48, 48, 27, 27, 67, 67, 33, 33, 46, 46, 31, 31, 78],
        [39, 71, 71, 56, 56, 34, 34, 4, 4, 75, 75, 54, 54, 78, 78, 40, 40, 66, 66, 52, 52, 60, 60, 41, 41, 35, 35, 50, 50, 72, 72, 70],
        [29, 15, 15, 61, 61, 7, 7, 62, 62, 55, 55, 3, 3, 51, 51, 12, 12, 24, 24, 57, 57, 20, 20, 58, 58, 32, 32, 59, 59, 28, 28, 13],
        [73, 72, 72, 25, 25, 35, 35, 42, 42, 60, 60, 23, 23, 66, 66, 43, 43, 78, 78, 21, 21, 75, 75, 44, 44, 34, 34, 0, 0, 71, 71, 45],
        [78, 9, 9, 38, 38, 5, 5, 65, 65, 17, 17, 36, 36, 13, 13, 79, 79, 52, 52, 41, 41, 50, 50, 63, 63, 56, 56, 4, 4, 54, 54, 8],
        [45, 6, 6, 33, 33, 1, 1, 46, 46, 10, 10, 31, 31, 8, 8, 47, 47, 14, 14, 29, 29, 12, 12, 48, 48, 18, 18, 27, 27, 16, 16, 73],
        [16, 25, 25, 42, 42, 23, 23, 43, 43, 21, 21, 44, 44, 0, 0, 45, 45, 33, 33, 46, 46, 31, 31, 47, 47, 29, 29, 48, 48, 27, 27, 72],
        [33, 7, 7, 11, 11, 15, 15, 19, 19, 51, 51, 53, 53, 55, 55, 1, 1, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 5],
        [17, 28, 28, 30, 30, 32, 32, 49, 49, 20, 20, 22, 22, 24, 24, 18, 18, 51, 51, 53, 53, 55, 55, 2, 2, 7, 7, 11, 11, 15, 15, 27],
        [72, 17, 17, 36, 36, 13, 13, 37, 37, 9, 9, 38, 38, 5, 5, 39, 39, 56, 56, 4, 4, 54, 54, 40, 40, 52, 52, 41, 41, 50, 50, 16],
        [12, 23, 23, 24, 24, 25, 25, 57, 57, 0, 0, 20, 20, 21, 21, 58, 58, 31, 31, 32, 32, 33, 33, 59, 59, 27, 27, 28, 28, 29, 29, 60],
        [31, 38, 38, 65, 65, 36, 36, 79, 79, 41, 41, 63, 63, 4, 4, 8, 8, 44, 44, 69, 69, 42, 42, 77, 77, 48, 48, 67, 67, 46, 46, 9],
        [60, 13, 13, 15, 15, 17, 17, 61, 61, 5, 5, 7, 7, 9, 9, 62, 62, 54, 54, 55, 55, 56, 56, 3, 3, 50, 50, 51, 51, 52, 52, 12],
        [14, 52, 52, 41, 41, 50, 50, 63, 63, 56, 56, 4, 4, 54, 54, 64, 64, 9, 9, 38, 38, 5, 5, 65, 65, 17, 17, 36, 36, 13, 13, 66],
        [9, 32, 32, 59, 59, 28, 28, 76, 76, 24, 24, 57, 57, 20, 20, 10, 10, 55, 55, 3, 3, 51, 51, 74, 74, 15, 15, 61, 61, 7, 7, 31],
        [66, 29, 29, 48, 48, 27, 27, 67, 67, 33, 33, 46, 46, 31, 31, 68, 68, 21, 21, 44, 44, 0, 0, 69, 69, 25, 25, 42, 42, 23, 23, 14],
    ];
    
    pub const MORTON_LUT_D5: [[u8; 32]; 80] = [
        [0, 16, 17, 1, 3, 19, 18, 2, 6, 22, 23, 7, 5, 21, 20, 4, 12, 28, 29, 13, 15, 31, 30, 14, 10, 26, 27, 11, 9, 25, 24, 8],
        [0, 8, 24, 16, 17, 25, 9, 1, 3, 11, 27, 19, 18, 26, 10, 2, 6, 14, 30, 22, 23, 31, 15, 7, 5, 13, 29, 21, 20, 28, 12, 4],
        [0, 4, 12, 8, 24, 28, 20, 16, 17, 21, 29, 25, 9, 13, 5, 1, 3, 7, 15, 11, 27, 31, 23, 19, 18, 22, 30, 26, 10, 14, 6, 2],
        [0, 2, 6, 4, 12, 14, 10, 8, 24, 26, 30, 28, 20, 22, 18, 16, 17, 19, 23, 21, 29, 31, 27, 25, 9, 11, 15, 13, 5, 7, 3, 1],
        [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16],
        [6, 22, 23, 7, 5, 21, 20, 4, 0, 16, 17, 1, 3, 19, 18, 2, 10, 26, 27, 11, 9, 25, 24, 8, 12, 28, 29, 13, 15, 31, 30, 14],
        [12, 4, 20, 28, 29, 21, 5, 13, 15, 7, 23, 31, 30, 22, 6, 14, 10, 2, 18, 26, 27, 19, 3, 11, 9, 1, 17, 25, 24, 16, 0, 8],
        [10, 11, 9, 8, 12, 13, 15, 14, 6, 7, 5, 4, 0, 1, 3, 2, 18, 19, 17, 16, 20, 21, 23, 22, 30, 31, 29, 28, 24, 25, 27, 26],
        [24, 16, 0, 8, 9, 1, 17, 25, 27, 19, 3, 11, 10, 2, 18, 26, 30, 22, 6, 14, 15, 7, 23, 31, 29, 21, 5, 13, 12, 4, 20, 28],
        [30, 14, 15, 31, 29, 13, 12, 28, 24, 8, 9, 25, 27, 11, 10, 26, 18, 2, 3, 19, 17, 1, 0, 16, 20, 4, 5, 21, 23, 7, 6, 22],
        [20, 28, 12, 4, 5, 13, 29, 21, 23, 31, 15, 7, 6, 14, 30, 22, 18, 26, 10, 2, 3, 11, 27, 19, 17, 25, 9, 1, 0, 8, 24, 16],
        [18, 16, 20, 22, 30, 28, 24, 26, 10, 8, 12, 14, 6, 4, 0, 2, 3, 1, 5, 7, 15, 13, 9, 11, 27, 25, 29, 31, 23, 21, 17, 19],
        [17, 25, 9, 1, 0, 8, 24, 16, 18, 26, 10, 2, 3, 11, 27, 19, 23, 31, 15, 7, 6, 14, 30, 22, 20, 28, 12, 4, 5, 13, 29, 21],
        [23, 7, 6, 22, 20, 4, 5, 21, 17, 1, 0, 16, 18, 2, 3, 19, 27, 11, 10, 26, 24, 8, 9, 25, 29, 13, 12, 28, 30, 14, 15, 31],
        [29, 21, 5, 13, 12, 4, 20, 28, 30, 22, 6, 14, 15, 7, 23, 31, 27, 19, 3, 11, 10, 2, 18, 26, 24, 16, 0, 8, 9, 1, 17, 25],
        [27, 26, 24, 25, 29, 28, 30, 31, 23, 22, 20, 21, 17, 16, 18, 19, 3, 2, 0, 1, 5, 4, 6, 7, 15, 14, 12, 13, 9, 8, 10, 11],
        [9, 1, 17, 25, 24, 16, 0, 8, 10, 2, 18, 26, 27, 19, 3, 11, 15, 7, 23, 31, 30, 22, 6, 14, 12, 4, 20, 28, 29, 21, 5, 13],
        [15, 31, 30, 14, 12, 28, 29, 13, 9, 25, 24, 8, 10, 26, 27, 11, 3, 19, 18, 2, 0, 16, 17, 1, 5, 21, 20, 4, 6, 22, 23, 7],
        [5, 13, 29, 21, 20, 28, 12, 4, 6, 14, 30, 22, 23, 31, 15, 7, 3, 11, 27, 19, 18, 26, 10, 2, 0, 8, 24, 16, 17, 25, 9, 1],
        [3, 7, 15, 11, 27, 31, 23, 19, 18, 22, 30, 26, 10, 14, 6, 2, 0, 4, 12, 8, 24, 28, 20, 16, 17, 21, 29, 25, 9, 13, 5, 1],
        [12, 13, 15, 14, 10, 11, 9, 8, 0, 1, 3, 2, 6, 7, 5, 4, 20, 21, 23, 22, 18, 19, 17, 16, 24, 25, 27, 26, 30, 31, 29, 28],
        [24, 8, 9, 25, 27, 11, 10, 26, 30, 14, 15, 31, 29, 13, 12, 28, 20, 4, 5, 21, 23, 7, 6, 22, 18, 2, 3, 19, 17, 1, 0, 16],
        [20, 22, 18, 16, 24, 26, 30, 28, 12, 14, 10, 8, 0, 2, 6, 4, 5, 7, 3, 1, 9, 11, 15, 13, 29, 31, 27, 25, 17, 19, 23, 21],
        [17, 1, 0, 16, 18, 2, 3, 19, 23, 7, 6, 22, 20, 4, 5, 21, 29, 13, 12, 28, 30, 14, 15, 31, 27, 11, 10, 26, 24, 8, 9, 25],
        [29, 28, 30, 31, 27, 26, 24, 25, 17, 16, 18, 19, 23, 22, 20, 21, 5, 4, 6, 7, 3, 2, 0, 1, 9, 8, 10, 11, 15, 14, 12, 13],
        [9, 25, 24, 8, 10, 26, 27, 11, 15, 31, 30, 14, 12, 28, 29, 13, 5, 21, 20, 4, 6, 22, 23, 7, 3, 19, 18, 2, 0, 16, 17, 1],
        [5, 1, 9, 13, 29, 25, 17, 21, 20, 16, 24, 28, 12, 8, 0, 4, 6, 2, 10, 14, 30, 26, 18, 22, 23, 19, 27, 31, 15, 11, 3, 7],
        [3, 19, 18, 2, 0, 16, 17, 1, 5, 21, 20, 4, 6, 22, 23, 7, 15, 31, 30, 14, 12, 28, 29, 13, 9, 25, 24, 8, 10, 26, 27, 11],
        [15, 14, 12, 13, 9, 8, 10, 11, 3, 2, 0, 1, 5, 4, 6, 7, 23, 22, 20, 21, 17, 16, 18, 19, 27, 26, 24, 25, 29, 28, 30, 31],
        [27, 11, 10, 26, 24, 8, 9, 25, 29, 13, 12, 28, 30, 14, 15, 31, 23, 7, 6, 22, 20, 4, 5, 21, 17, 1, 0, 16, 18, 2, 3, 19],
        [23, 21, 17, 19, 27, 25, 29, 31, 15, 13, 9, 11, 3, 1, 5, 7, 6, 4, 0, 2, 10, 8, 12, 14, 30, 28, 24, 26, 18, 16, 20, 22],
        [18, 2, 3, 19, 17, 1, 0, 16, 20, 4, 5, 21, 23, 7, 6, 22, 30, 14, 15, 31, 29, 13, 12, 28, 24, 8, 9, 25, 27, 11, 10, 26],
        [30, 31, 29, 28, 24, 25, 27, 26, 18, 19, 17, 16, 20, 21, 23, 22, 6, 7, 5, 4, 0, 1, 3, 2, 10, 11, 9, 8, 12, 13, 15, 14],
        [10, 26, 27, 11, 9, 25, 24, 8, 12, 28, 29, 13, 15, 31, 30, 14, 6, 22, 23, 7, 5, 21, 20, 4, 0, 16, 17, 1, 3, 19, 18, 2],
        [6, 14, 30, 22, 23, 31, 15, 7, 5, 13, 29, 21, 20, 28, 12, 4, 0, 8, 24, 16, 17, 25, 9, 1, 3, 11, 27, 19, 18, 26, 10, 2],
        [3, 11, 27, 19, 18, 26, 10, 2, 0, 8, 24, 16, 17, 25, 9, 1, 5, 13, 29, 21, 20, 28, 12, 4, 6, 14, 30, 22, 23, 31, 15, 7],
        [3, 2, 0, 1, 5, 4, 6, 7, 15, 14, 12, 13, 9, 8, 10, 11, 27, 26, 24, 25, 29, 28, 30, 31, 23, 22, 20, 21, 17, 16, 18, 19],
        [27, 25, 29, 31, 23, 21, 17, 19, 3, 1, 5, 7, 15, 13, 9, 11, 10, 8, 12, 14, 6, 4, 0, 2, 18, 16, 20, 22, 30, 28, 24, 26],
        [18, 19, 17, 16, 20, 21, 23, 22, 30, 31, 29, 28, 24, 25, 27, 26, 10, 11, 9, 8, 12, 13, 15, 14, 6, 7, 5, 4, 0, 1, 3, 2],
        [10, 14, 6, 2, 18, 22, 30, 26, 27, 31, 23, 19, 3, 7, 15, 11, 9, 13, 5, 1, 17, 21, 29, 25, 24, 28, 20, 16, 0, 4, 12, 8],
        [24, 26, 30, 28, 20, 22, 18, 16, 0, 2, 6, 4, 12, 14, 10, 8, 9, 11, 15, 13, 5, 7, 3, 1, 17, 19, 23, 21, 29, 31, 27, 25],
        [17, 16, 18, 19, 23, 22, 20, 21, 29, 28, 30, 31, 27, 26, 24, 25, 9, 8, 10, 11, 15, 14, 12, 13, 5, 4, 6, 7, 3, 2, 0, 1],
        [5, 4, 6, 7, 3, 2, 0, 1, 9, 8, 10, 11, 15, 14, 12, 13, 29, 28, 30, 31, 27, 26, 24, 25, 17, 16, 18, 19, 23, 22, 20, 21],
        [29, 31, 27, 25, 17, 19, 23, 21, 5, 7, 3, 1, 9, 11, 15, 13, 12, 14, 10, 8, 0, 2, 6, 4, 20, 22, 18, 16, 24, 26, 30, 28],
        [20, 21, 23, 22, 18, 19, 17, 16, 24, 25, 27, 26, 30, 31, 29, 28, 12, 13, 15, 14, 10, 11, 9, 8, 0, 1, 3, 2, 6, 7, 5, 4],
        [12, 8, 0, 4, 20, 16, 24, 28, 29, 25, 17, 21, 5, 1, 9, 13, 15, 11, 3, 7, 23, 19, 27, 31, 30, 26, 18, 22, 6, 2, 10, 14],
        [6, 7, 5, 4, 0, 1, 3, 2, 10, 11, 9, 8, 12, 13, 15, 14, 30, 31, 29, 28, 24, 25, 27, 26, 18, 19, 17, 16, 20, 21, 23, 22],
        [30, 28, 24, 26, 18, 16, 20, 22, 6, 4, 0, 2, 10, 8, 12, 14, 15, 13, 9, 11, 3, 1, 5, 7, 23, 21, 17, 19, 27, 25, 29, 31],
        [23, 22, 20, 21, 17, 16, 18, 19, 27, 26, 24, 25, 29, 28, 30, 31, 15, 14, 12, 13, 9, 8, 10, 11, 3, 2, 0, 1, 5, 4, 6, 7],
        [6, 2, 10, 14, 30, 26, 18, 22, 23, 19, 27, 31, 15, 11, 3, 7, 5, 1, 9, 13, 29, 25, 17, 21, 20, 16, 24, 28, 12, 8, 0, 4],
        [5, 21, 20, 4, 6, 22, 23, 7, 3, 19, 18, 2, 0, 16, 17, 1, 9, 25, 24, 8, 10, 26, 27, 11, 15, 31, 30, 14, 12, 28, 29, 13],
        [9, 8, 10, 11, 15, 14, 12, 13, 5, 4, 6, 7, 3, 2, 0, 1, 17, 16, 18, 19, 23, 22, 20, 21, 29, 28, 30, 31, 27, 26, 24, 25],
        [29, 13, 12, 28, 30, 14, 15, 31, 27, 11, 10, 26, 24, 8, 9, 25, 17, 1, 0, 16, 18, 2, 3, 19, 23, 7, 6, 22, 20, 4, 5, 21],
        [17, 19, 23, 21, 29, 31, 27, 25, 9, 11, 15, 13, 5, 7, 3, 1, 0, 2, 6, 4, 12, 14, 10, 8, 24, 26, 30, 28, 20, 22, 18, 16],
        [20, 4, 5, 21, 23, 7, 6, 22, 18, 2, 3, 19, 17, 1, 0, 16, 24, 8, 9, 25, 27, 11, 10, 26, 30, 14, 15, 31, 29, 13, 12, 28],
        [24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16, 0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8],
        [12, 28, 29, 13, 15, 31, 30, 14, 10, 26, 27, 11, 9, 25, 24, 8, 0, 16, 17, 1, 3, 19, 18, 2, 6, 22, 23, 7, 5, 21, 20, 4],
        [5, 7, 3, 1, 9, 11, 15, 13, 29, 31, 27, 25, 17, 19, 23, 21, 20, 22, 18, 16, 24, 26, 30, 28, 12, 14, 10, 8, 0, 2, 6, 4],
        [20, 16, 24, 28, 12, 8, 0, 4, 5, 1, 9, 13, 29, 25, 17, 21, 23, 19, 27, 31, 15, 11, 3, 7, 6, 2, 10, 14, 30, 26, 18, 22],
        [6, 4, 0, 2, 10, 8, 12, 14, 30, 28, 24, 26, 18, 16, 20, 22, 23, 21, 17, 19, 27, 25, 29, 31, 15, 13, 9, 11, 3, 1, 5, 7],
        [23, 31, 15, 7, 6, 14, 30, 22, 20, 28, 12, 4, 5, 13, 29, 21, 17, 25, 9, 1, 0, 8, 24, 16, 18, 26, 10, 2, 3, 11, 27, 19],
        [3, 1, 5, 7, 15, 13, 9, 11, 27, 25, 29, 31, 23, 21, 17, 19, 18, 16, 20, 22, 30, 28, 24, 26, 10, 8, 12, 14, 6, 4, 0, 2],
        [18, 22, 30, 26, 10, 14, 6, 2, 3, 7, 15, 11, 27, 31, 23, 19, 17, 21, 29, 25, 9, 13, 5, 1, 0, 4, 12, 8, 24, 28, 20, 16],
        [9, 11, 15, 13, 5, 7, 3, 1, 17, 19, 23, 21, 29, 31, 27, 25, 24, 26, 30, 28, 20, 22, 18, 16, 0, 2, 6, 4, 12, 14, 10, 8],
        [24, 28, 20, 16, 0, 4, 12, 8, 9, 13, 5, 1, 17, 21, 29, 25, 27, 31, 23, 19, 3, 7, 15, 11, 10, 14, 6, 2, 18, 22, 30, 26],
        [10, 8, 12, 14, 6, 4, 0, 2, 18, 16, 20, 22, 30, 28, 24, 26, 27, 25, 29, 31, 23, 21, 17, 19, 3, 1, 5, 7, 15, 13, 9, 11],
        [27, 19, 3, 11, 10, 2, 18, 26, 24, 16, 0, 8, 9, 1, 17, 25, 29, 21, 5, 13, 12, 4, 20, 28, 30, 22, 6, 14, 15, 7, 23, 31],
        [15, 13, 9, 11, 3, 1, 5, 7, 23, 21, 17, 19, 27, 25, 29, 31, 30, 28, 24, 26, 18, 16, 20, 22, 6, 4, 0, 2, 10, 8, 12, 14],
        [30, 26, 18, 22, 6, 2, 10, 14, 15, 11, 3, 7, 23, 19, 27, 31, 29, 25, 17, 21, 5, 1, 9, 13, 12, 8, 0, 4, 20, 16, 24, 28],
        [12, 14, 10, 8, 0, 2, 6, 4, 20, 22, 18, 16, 24, 26, 30, 28, 29, 31, 27, 25, 17, 19, 23, 21, 5, 7, 3, 1, 9, 11, 15, 13],
        [9, 13, 5, 1, 17, 21, 29, 25, 24, 28, 20, 16, 0, 4, 12, 8, 10, 14, 6, 2, 18, 22, 30, 26, 27, 31, 23, 19, 3, 7, 15, 11],
        [10, 2, 18, 26, 27, 19, 3, 11, 9, 1, 17, 25, 24, 16, 0, 8, 12, 4, 20, 28, 29, 21, 5, 13, 15, 7, 23, 31, 30, 22, 6, 14],
        [15, 7, 23, 31, 30, 22, 6, 14, 12, 4, 20, 28, 29, 21, 5, 13, 9, 1, 17, 25, 24, 16, 0, 8, 10, 2, 18, 26, 27, 19, 3, 11],
        [15, 11, 3, 7, 23, 19, 27, 31, 30, 26, 18, 22, 6, 2, 10, 14, 12, 8, 0, 4, 20, 16, 24, 28, 29, 25, 17, 21, 5, 1, 9, 13],
        [17, 21, 29, 25, 9, 13, 5, 1, 0, 4, 12, 8, 24, 28, 20, 16, 18, 22, 30, 26, 10, 14, 6, 2, 3, 7, 15, 11, 27, 31, 23, 19],
        [18, 26, 10, 2, 3, 11, 27, 19, 17, 25, 9, 1, 0, 8, 24, 16, 20, 28, 12, 4, 5, 13, 29, 21, 23, 31, 15, 7, 6, 14, 30, 22],
        [23, 19, 27, 31, 15, 11, 3, 7, 6, 2, 10, 14, 30, 26, 18, 22, 20, 16, 24, 28, 12, 8, 0, 4, 5, 1, 9, 13, 29, 25, 17, 21],
        [29, 25, 17, 21, 5, 1, 9, 13, 12, 8, 0, 4, 20, 16, 24, 28, 30, 26, 18, 22, 6, 2, 10, 14, 15, 11, 3, 7, 23, 19, 27, 31],
        [30, 22, 6, 14, 15, 7, 23, 31, 29, 21, 5, 13, 12, 4, 20, 28, 24, 16, 0, 8, 9, 1, 17, 25, 27, 19, 3, 11, 10, 2, 18, 26],
        [27, 31, 23, 19, 3, 7, 15, 11, 10, 14, 6, 2, 18, 22, 30, 26, 24, 28, 20, 16, 0, 4, 12, 8, 9, 13, 5, 1, 17, 21, 29, 25],
    ];
    
    pub const HILBERT_LUT_D5: [[u8; 32]; 80] = [
        [0, 3, 7, 4, 15, 12, 8, 11, 31, 28, 24, 27, 16, 19, 23, 20, 1, 2, 6, 5, 14, 13, 9, 10, 30, 29, 25, 26, 17, 18, 22, 21],
        [0, 7, 15, 8, 31, 24, 16, 23, 1, 6, 14, 9, 30, 25, 17, 22, 3, 4, 12, 11, 28, 27, 19, 20, 2, 5, 13, 10, 29, 26, 18, 21],
        [0, 15, 31, 16, 1, 14, 30, 17, 3, 12, 28, 19, 2, 13, 29, 18, 7, 8, 24, 23, 6, 9, 25, 22, 4, 11, 27, 20, 5, 10, 26, 21],
        [0, 31, 1, 30, 3, 28, 2, 29, 7, 24, 6, 25, 4, 27, 5, 26, 15, 16, 14, 17, 12, 19, 13, 18, 8, 23, 9, 22, 11, 20, 10, 21],
        [0, 1, 3, 2, 7, 6, 4, 5, 15, 14, 12, 13, 8, 9, 11, 10, 31, 30, 28, 29, 24, 25, 27, 26, 16, 17, 19, 18, 23, 22, 20, 21],
        [8, 11, 15, 12, 7, 4, 0, 3, 23, 20, 16, 19, 24, 27, 31, 28, 9, 10, 14, 13, 6, 5, 1, 2, 22, 21, 17, 18, 25, 26, 30, 29],
        [30, 25, 17, 22, 1, 6, 14, 9, 31, 24, 16, 23, 0, 7, 15, 8, 29, 26, 18, 21, 2, 5, 13, 10, 28, 27, 19, 20, 3, 4, 12, 11],
        [12, 13, 15, 14, 11, 10, 8, 9, 3, 2, 0, 1, 4, 5, 7, 6, 19, 18, 16, 17, 20, 21, 23, 22, 28, 29, 31, 30, 27, 26, 24, 25],
        [2, 5, 13, 10, 29, 26, 18, 21, 3, 4, 12, 11, 28, 27, 19, 20, 1, 6, 14, 9, 30, 25, 17, 22, 0, 7, 15, 8, 31, 24, 16, 23],
        [22, 21, 17, 18, 25, 26, 30, 29, 9, 10, 14, 13, 6, 5, 1, 2, 23, 20, 16, 19, 24, 27, 31, 28, 8, 11, 15, 12, 7, 4, 0, 3],
        [28, 27, 19, 20, 3, 4, 12, 11, 29, 26, 18, 21, 2, 5, 13, 10, 31, 24, 16, 23, 0, 7, 15, 8, 30, 25, 17, 22, 1, 6, 14, 9],
        [14, 17, 15, 16, 13, 18, 12, 19, 9, 22, 8, 23, 10, 21, 11, 20, 1, 30, 0, 31, 2, 29, 3, 28, 6, 25, 7, 24, 5, 26, 4, 27],
        [4, 3, 11, 12, 27, 28, 20, 19, 5, 2, 10, 13, 26, 29, 21, 18, 7, 0, 8, 15, 24, 31, 23, 16, 6, 1, 9, 14, 25, 30, 22, 17],
        [10, 9, 13, 14, 5, 6, 2, 1, 21, 22, 18, 17, 26, 25, 29, 30, 11, 8, 12, 15, 4, 7, 3, 0, 20, 23, 19, 16, 27, 24, 28, 31],
        [26, 29, 21, 18, 5, 2, 10, 13, 27, 28, 20, 19, 4, 3, 11, 12, 25, 30, 22, 17, 6, 1, 9, 14, 24, 31, 23, 16, 7, 0, 8, 15],
        [18, 19, 17, 16, 21, 20, 22, 23, 29, 28, 30, 31, 26, 27, 25, 24, 13, 12, 14, 15, 10, 11, 9, 8, 2, 3, 1, 0, 5, 4, 6, 7],
        [6, 1, 9, 14, 25, 30, 22, 17, 7, 0, 8, 15, 24, 31, 23, 16, 5, 2, 10, 13, 26, 29, 21, 18, 4, 3, 11, 12, 27, 28, 20, 19],
        [20, 23, 19, 16, 27, 24, 28, 31, 11, 8, 12, 15, 4, 7, 3, 0, 21, 22, 18, 17, 26, 25, 29, 30, 10, 9, 13, 14, 5, 6, 2, 1],
        [24, 31, 23, 16, 7, 0, 8, 15, 25, 30, 22, 17, 6, 1, 9, 14, 27, 28, 20, 19, 4, 3, 11, 12, 26, 29, 21, 18, 5, 2, 10, 13],
        [16, 31, 15, 0, 17, 30, 14, 1, 19, 28, 12, 3, 18, 29, 13, 2, 23, 24, 8, 7, 22, 25, 9, 6, 20, 27, 11, 4, 21, 26, 10, 5],
        [8, 9, 11, 10, 15, 14, 12, 13, 7, 6, 4, 5, 0, 1, 3, 2, 23, 22, 20, 21, 16, 17, 19, 18, 24, 25, 27, 26, 31, 30, 28, 29],
        [30, 29, 25, 26, 17, 18, 22, 21, 1, 2, 6, 5, 14, 13, 9, 10, 31, 28, 24, 27, 16, 19, 23, 20, 0, 3, 7, 4, 15, 12, 8, 11],
        [12, 19, 13, 18, 15, 16, 14, 17, 11, 20, 10, 21, 8, 23, 9, 22, 3, 28, 2, 29, 0, 31, 1, 30, 4, 27, 5, 26, 7, 24, 6, 25],
        [2, 1, 5, 6, 13, 14, 10, 9, 29, 30, 26, 25, 18, 17, 21, 22, 3, 0, 4, 7, 12, 15, 11, 8, 28, 31, 27, 24, 19, 16, 20, 23],
        [22, 23, 21, 20, 17, 16, 18, 19, 25, 24, 26, 27, 30, 31, 29, 28, 9, 8, 10, 11, 14, 15, 13, 12, 6, 7, 5, 4, 1, 0, 2, 3],
        [28, 31, 27, 24, 19, 16, 20, 23, 3, 0, 4, 7, 12, 15, 11, 8, 29, 30, 26, 25, 18, 17, 21, 22, 2, 1, 5, 6, 13, 14, 10, 9],
        [14, 1, 17, 30, 15, 0, 16, 31, 13, 2, 18, 29, 12, 3, 19, 28, 9, 6, 22, 25, 8, 7, 23, 24, 10, 5, 21, 26, 11, 4, 20, 27],
        [4, 7, 3, 0, 11, 8, 12, 15, 27, 24, 28, 31, 20, 23, 19, 16, 5, 6, 2, 1, 10, 9, 13, 14, 26, 25, 29, 30, 21, 22, 18, 17],
        [10, 11, 9, 8, 13, 12, 14, 15, 5, 4, 6, 7, 2, 3, 1, 0, 21, 20, 22, 23, 18, 19, 17, 16, 26, 27, 25, 24, 29, 28, 30, 31],
        [26, 25, 29, 30, 21, 22, 18, 17, 5, 6, 2, 1, 10, 9, 13, 14, 27, 24, 28, 31, 20, 23, 19, 16, 4, 7, 3, 0, 11, 8, 12, 15],
        [18, 13, 19, 12, 17, 14, 16, 15, 21, 10, 20, 11, 22, 9, 23, 8, 29, 2, 28, 3, 30, 1, 31, 0, 26, 5, 27, 4, 25, 6, 24, 7],
        [6, 5, 1, 2, 9, 10, 14, 13, 25, 26, 30, 29, 22, 21, 17, 18, 7, 4, 0, 3, 8, 11, 15, 12, 24, 27, 31, 28, 23, 20, 16, 19],
        [20, 21, 23, 22, 19, 18, 16, 17, 27, 26, 24, 25, 28, 29, 31, 30, 11, 10, 8, 9, 12, 13, 15, 14, 4, 5, 7, 6, 3, 2, 0, 1],
        [24, 27, 31, 28, 23, 20, 16, 19, 7, 4, 0, 3, 8, 11, 15, 12, 25, 26, 30, 29, 22, 21, 17, 18, 6, 5, 1, 2, 9, 10, 14, 13],
        [16, 23, 31, 24, 15, 8, 0, 7, 17, 22, 30, 25, 14, 9, 1, 6, 19, 20, 28, 27, 12, 11, 3, 4, 18, 21, 29, 26, 13, 10, 2, 5],
        [8, 15, 7, 0, 23, 16, 24, 31, 9, 14, 6, 1, 22, 17, 25, 30, 11, 12, 4, 3, 20, 19, 27, 28, 10, 13, 5, 2, 21, 18, 26, 29],
        [2, 3, 1, 0, 5, 4, 6, 7, 13, 12, 14, 15, 10, 11, 9, 8, 29, 28, 30, 31, 26, 27, 25, 24, 18, 19, 17, 16, 21, 20, 22, 23],
        [22, 9, 23, 8, 21, 10, 20, 11, 17, 14, 16, 15, 18, 13, 19, 12, 25, 6, 24, 7, 26, 5, 27, 4, 30, 1, 31, 0, 29, 2, 28, 3],
        [28, 29, 31, 30, 27, 26, 24, 25, 19, 18, 16, 17, 20, 21, 23, 22, 3, 2, 0, 1, 4, 5, 7, 6, 12, 13, 15, 14, 11, 10, 8, 9],
        [28, 19, 3, 12, 29, 18, 2, 13, 31, 16, 0, 15, 30, 17, 1, 14, 27, 20, 4, 11, 26, 21, 5, 10, 24, 23, 7, 8, 25, 22, 6, 9],
        [8, 23, 9, 22, 11, 20, 10, 21, 15, 16, 14, 17, 12, 19, 13, 18, 7, 24, 6, 25, 4, 27, 5, 26, 0, 31, 1, 30, 3, 28, 2, 29],
        [30, 31, 29, 28, 25, 24, 26, 27, 17, 16, 18, 19, 22, 23, 21, 20, 1, 0, 2, 3, 6, 7, 5, 4, 14, 15, 13, 12, 9, 8, 10, 11],
        [6, 7, 5, 4, 1, 0, 2, 3, 9, 8, 10, 11, 14, 15, 13, 12, 25, 24, 26, 27, 30, 31, 29, 28, 22, 23, 21, 20, 17, 16, 18, 19],
        [20, 11, 21, 10, 23, 8, 22, 9, 19, 12, 18, 13, 16, 15, 17, 14, 27, 4, 26, 5, 24, 7, 25, 6, 28, 3, 29, 2, 31, 0, 30, 1],
        [24, 25, 27, 26, 31, 30, 28, 29, 23, 22, 20, 21, 16, 17, 19, 18, 7, 6, 4, 5, 0, 1, 3, 2, 8, 9, 11, 10, 15, 14, 12, 13],
        [2, 13, 29, 18, 3, 12, 28, 19, 1, 14, 30, 17, 0, 15, 31, 16, 5, 10, 26, 21, 4, 11, 27, 20, 6, 9, 25, 22, 7, 8, 24, 23],
        [4, 5, 7, 6, 3, 2, 0, 1, 11, 10, 8, 9, 12, 13, 15, 14, 27, 26, 24, 25, 28, 29, 31, 30, 20, 21, 23, 22, 19, 18, 16, 17],
        [10, 21, 11, 20, 9, 22, 8, 23, 13, 18, 12, 19, 14, 17, 15, 16, 5, 26, 4, 27, 6, 25, 7, 24, 2, 29, 3, 28, 1, 30, 0, 31],
        [26, 27, 25, 24, 29, 28, 30, 31, 21, 20, 22, 23, 18, 19, 17, 16, 5, 4, 6, 7, 2, 3, 1, 0, 10, 11, 9, 8, 13, 12, 14, 15],
        [30, 17, 1, 14, 31, 16, 0, 15, 29, 18, 2, 13, 28, 19, 3, 12, 25, 22, 6, 9, 24, 23, 7, 8, 26, 21, 5, 10, 27, 20, 4, 11],
        [12, 15, 11, 8, 3, 0, 4, 7, 19, 16, 20, 23, 28, 31, 27, 24, 13, 14, 10, 9, 2, 1, 5, 6, 18, 17, 21, 22, 29, 30, 26, 25],
        [14, 15, 13, 12, 9, 8, 10, 11, 1, 0, 2, 3, 6, 7, 5, 4, 17, 16, 18, 19, 22, 23, 21, 20, 30, 31, 29, 28, 25, 24, 26, 27],
        [18, 17, 21, 22, 29, 30, 26, 25, 13, 14, 10, 9, 2, 1, 5, 6, 19, 16, 20, 23, 28, 31, 27, 24, 12, 15, 11, 8, 3, 0, 4, 7],
        [16, 15, 17, 14, 19, 12, 18, 13, 23, 8, 22, 9, 20, 11, 21, 10, 31, 0, 30, 1, 28, 3, 29, 2, 24, 7, 25, 6, 27, 4, 26, 5],
        [14, 13, 9, 10, 1, 2, 6, 5, 17, 18, 22, 21, 30, 29, 25, 26, 15, 12, 8, 11, 0, 3, 7, 4, 16, 19, 23, 20, 31, 28, 24, 27],
        [16, 17, 19, 18, 23, 22, 20, 21, 31, 30, 28, 29, 24, 25, 27, 26, 15, 14, 12, 13, 8, 9, 11, 10, 0, 1, 3, 2, 7, 6, 4, 5],
        [16, 19, 23, 20, 31, 28, 24, 27, 15, 12, 8, 11, 0, 3, 7, 4, 17, 18, 22, 21, 30, 29, 25, 26, 14, 13, 9, 10, 1, 2, 6, 5],
        [28, 3, 29, 2, 31, 0, 30, 1, 27, 4, 26, 5, 24, 7, 25, 6, 19, 12, 18, 13, 16, 15, 17, 14, 20, 11, 21, 10, 23, 8, 22, 9],
        [6, 9, 25, 22, 7, 8, 24, 23, 5, 10, 26, 21, 4, 11, 27, 20, 1, 14, 30, 17, 0, 15, 31, 16, 2, 13, 29, 18, 3, 12, 28, 19],
        [2, 29, 3, 28, 1, 30, 0, 31, 5, 26, 4, 27, 6, 25, 7, 24, 13, 18, 12, 19, 14, 17, 15, 16, 10, 21, 11, 20, 9, 22, 8, 23],
        [20, 19, 27, 28, 11, 12, 4, 3, 21, 18, 26, 29, 10, 13, 5, 2, 23, 16, 24, 31, 8, 15, 7, 0, 22, 17, 25, 30, 9, 14, 6, 1],
        [30, 1, 31, 0, 29, 2, 28, 3, 25, 6, 24, 7, 26, 5, 27, 4, 17, 14, 16, 15, 18, 13, 19, 12, 22, 9, 23, 8, 21, 10, 20, 11],
        [24, 23, 7, 8, 25, 22, 6, 9, 27, 20, 4, 11, 26, 21, 5, 10, 31, 16, 0, 15, 30, 17, 1, 14, 28, 19, 3, 12, 29, 18, 2, 13],
        [24, 7, 25, 6, 27, 4, 26, 5, 31, 0, 30, 1, 28, 3, 29, 2, 23, 8, 22, 9, 20, 11, 21, 10, 16, 15, 17, 14, 19, 12, 18, 13],
        [4, 11, 27, 20, 5, 10, 26, 21, 7, 8, 24, 23, 6, 9, 25, 22, 3, 12, 28, 19, 2, 13, 29, 18, 0, 15, 31, 16, 1, 14, 30, 17],
        [6, 25, 7, 24, 5, 26, 4, 27, 1, 30, 0, 31, 2, 29, 3, 28, 9, 22, 8, 23, 10, 21, 11, 20, 14, 17, 15, 16, 13, 18, 12, 19],
        [10, 13, 5, 2, 21, 18, 26, 29, 11, 12, 4, 3, 20, 19, 27, 28, 9, 14, 6, 1, 22, 17, 25, 30, 8, 15, 7, 0, 23, 16, 24, 31],
        [26, 5, 27, 4, 25, 6, 24, 7, 29, 2, 28, 3, 30, 1, 31, 0, 21, 10, 20, 11, 22, 9, 23, 8, 18, 13, 19, 12, 17, 14, 16, 15],
        [26, 21, 5, 10, 27, 20, 4, 11, 25, 22, 6, 9, 24, 23, 7, 8, 29, 18, 2, 13, 28, 19, 3, 12, 30, 17, 1, 14, 31, 16, 0, 15],
        [4, 27, 5, 26, 7, 24, 6, 25, 3, 28, 2, 29, 0, 31, 1, 30, 11, 20, 10, 21, 8, 23, 9, 22, 12, 19, 13, 18, 15, 16, 14, 17],
        [12, 3, 19, 28, 13, 2, 18, 29, 15, 0, 16, 31, 14, 1, 17, 30, 11, 4, 20, 27, 10, 5, 21, 26, 8, 7, 23, 24, 9, 6, 22, 25],
        [14, 9, 1, 6, 17, 22, 30, 25, 15, 8, 0, 7, 16, 23, 31, 24, 13, 10, 2, 5, 18, 21, 29, 26, 12, 11, 3, 4, 19, 20, 28, 27],
        [22, 17, 25, 30, 9, 14, 6, 1, 23, 16, 24, 31, 8, 15, 7, 0, 21, 18, 26, 29, 10, 13, 5, 2, 20, 19, 27, 28, 11, 12, 4, 3],
        [18, 29, 13, 2, 19, 28, 12, 3, 17, 30, 14, 1, 16, 31, 15, 0, 21, 26, 10, 5, 20, 27, 11, 4, 22, 25, 9, 6, 23, 24, 8, 7],
        [8, 7, 23, 24, 9, 6, 22, 25, 11, 4, 20, 27, 10, 5, 21, 26, 15, 0, 16, 31, 14, 1, 17, 30, 12, 3, 19, 28, 13, 2, 18, 29],
        [12, 11, 3, 4, 19, 20, 28, 27, 13, 10, 2, 5, 18, 21, 29, 26, 15, 8, 0, 7, 16, 23, 31, 24, 14, 9, 1, 6, 17, 22, 30, 25],
        [22, 25, 9, 6, 23, 24, 8, 7, 21, 26, 10, 5, 20, 27, 11, 4, 17, 30, 14, 1, 16, 31, 15, 0, 18, 29, 13, 2, 19, 28, 12, 3],
        [10, 5, 21, 26, 11, 4, 20, 27, 9, 6, 22, 25, 8, 7, 23, 24, 13, 2, 18, 29, 12, 3, 19, 28, 14, 1, 17, 30, 15, 0, 16, 31],
        [18, 21, 29, 26, 13, 10, 2, 5, 19, 20, 28, 27, 12, 11, 3, 4, 17, 22, 30, 25, 14, 9, 1, 6, 16, 23, 31, 24, 15, 8, 0, 7],
        [20, 27, 11, 4, 21, 26, 10, 5, 23, 24, 8, 7, 22, 25, 9, 6, 19, 28, 12, 3, 18, 29, 13, 2, 16, 31, 15, 0, 17, 30, 14, 1],
    ];
}

#[inline]
fn gray<T>(i: T) -> T where T: NumTraits {
    #[cfg(any(feature = "tiny_lut", feature = "small_lut"))]
    if i < NumTraits::from_usize(GRAY_LUT.len()) {
        return NumTraits::from_u8(GRAY_LUT[i.to_usize()]);
    }
    i.bit_xor(i.shr(NumTraits::one()))
}

#[inline]
fn gray_inverse<T, const D: usize>(i: T) -> T where T: NumTraits {
    #[cfg(any(feature = "tiny_lut", feature = "small_lut"))]
    if i < NumTraits::from_usize(GRAY_INV_LUT.len()) {
        return NumTraits::from_u8(GRAY_INV_LUT[i.to_usize()]);
    }
    // Since we know that only a small subset of bits of the integer are used,
    // we can perform a minimal gray code inverse rather than a complete one
    (1..D).fold(i, |acc, shift| acc.bit_xor(i.shr(shift)))
}

#[inline]
fn shl_cyclic<T, const D: usize>(i: T, a: usize, lower_mask: T) -> T where T: NumTraits {
    NumTraits::bit_and(lower_mask, i.shl(a).bit_or(i.shr(D - a)))
}

#[inline]
fn shr_cyclic<T, const D: usize>(i: T, a: usize, lower_mask: T) -> T where T: NumTraits {
    NumTraits::bit_and(lower_mask, i.shr(a).bit_or(i.shl(D - a)))
}

#[inline]
fn rotation_transform(i: usize) -> usize {
    #[cfg(any(feature = "tiny_lut", feature = "small_lut"))]
    if i < ROTATION_TRANSFORM_LUT.len() {
        return ROTATION_TRANSFORM_LUT[i];
    }
    if i > 0 {
        i.wrapping_add((i & 0x1).wrapping_sub(1)).trailing_ones() as usize
    } else {
        0
    }
}

#[inline]
fn axis_transform<T>(i: T) -> T where T: NumTraits {
    #[cfg(any(feature = "tiny_lut", feature = "small_lut"))]
    if i < NumTraits::from_usize(AXIS_TRANSFORM_LUT.len()) {
        return NumTraits::from_u8(AXIS_TRANSFORM_LUT[i.to_usize()]);
    }
    if i == NumTraits::zero() {
        NumTraits::zero()
    } else {
        gray(NumTraits::bit_and(i.sub(NumTraits::one()), NumTraits::bit_not(NumTraits::one())))
    }
}

// Until we have complex generic constants, we have to pass D in here (needed by coords)
// Waiting on: https://github.com/rust-lang/rust/issues/76560
#[derive(Clone, Copy, Default, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Hilbert<DM, const D: usize>(pub(crate) DM::Dilated)
where
    // When https://github.com/rust-lang/rust/issues/52662 is available, we can clean this up
    DM: DilationMethod,
    DM::Undilated: Coord,
    DM::Dilated: Index;

impl<DM, const D: usize> Hilbert<DM, D>
where
    // When https://github.com/rust-lang/rust/issues/52662 is available, we can clean this up
    DM: DilationMethod,
    DM::Undilated: Coord,
    DM::Dilated: Index,
{
    #[inline]
    fn walk_static_lut<F>(index: DM::Dilated, min_order: usize, lower_mask: DM::Dilated, mut f: F) -> usize
    where
        F: FnMut(usize, DM::Dilated, usize) -> DM::Dilated
    {
        // A subset of highest bits of index will be 0, therefore, we can skip a certain
        // number of iterations in the following loop. Note that skipping iterations
        // still requires us to rotate the pattern as if we had iterated all orders, see
        // rotate_amount below.
        let order = ((DM::Dilated::bits() + D - 1) - index.lz()) / D;

        // We iterate in reverse because higher orders affect the rotation of lower orders
        let mut transform = order % D;
//        let mut transform = match D {
//            2 => static_lut::INITIAL_TRANSFORM_LUT_D2[order % D],
//            3 => static_lut::INITIAL_TRANSFORM_LUT_D3[order % D],
//            4 => static_lut::INITIAL_TRANSFORM_LUT_D4[order % D],
//            5 => static_lut::INITIAL_TRANSFORM_LUT_D5[order % D],
//            _ => unreachable!()
//        } as usize;
        for shift in (min_order..order).rev().map(|i| i * D) {
            let index_partial = index.shr(shift).bit_and(lower_mask);
            let hilbert_partial = f(transform, index_partial, shift);
//            transform = transform ^ hilbert_partial.to_usize();
            transform = match D {
                2 => static_lut::TRANSFORM_LUT_D2[transform][hilbert_partial.to_usize()],
                3 => static_lut::TRANSFORM_LUT_D3[transform][hilbert_partial.to_usize()],
                4 => static_lut::TRANSFORM_LUT_D4[transform][hilbert_partial.to_usize()],
                5 => static_lut::TRANSFORM_LUT_D5[transform][hilbert_partial.to_usize()],
                _ => unreachable!()
            } as usize;
        }
        transform
    }

    #[inline]
    fn walk<F>(index: DM::Dilated, min_order: usize, lower_mask: DM::Dilated, mut f: F) -> (usize, DM::Dilated)
    where
        F: FnMut(DM::Dilated, usize, usize, DM::Dilated) -> DM::Dilated
    {
        // A subset of highest bits of index will be 0, therefore, we can skip a certain
        // number of iterations in the following loop. Note that skipping iterations
        // still requires us to rotate the pattern as if we had iterated all orders, see
        // rotate_amount below.
        let order = (DM::Dilated::bits() - index.lz() + D - 1) / D;

        // We iterate in reverse because higher orders affect the rotation of lower orders
        let mut flip_axes = DM::Dilated::zero();
        let mut rotate_amount = (D - 1) - (order % D);
        for shift in (min_order..order).rev().map(|i| i * D) {
            // Extract a portion of the index
            let index_partial = index.shr(shift).bit_and(lower_mask);

            // Context specific code generates the hilbert partial
            let hilbert_partial = f(index_partial, shift, rotate_amount, flip_axes);

            // Calculate the next axis flip flags and rotation amounts resulting from this order
            flip_axes = flip_axes.bit_xor(shl_cyclic::<_, D>(axis_transform(hilbert_partial), rotate_amount, lower_mask));
            rotate_amount = (rotation_transform(hilbert_partial.to_usize()) + rotate_amount + 1) % D;
        }
        (rotate_amount, flip_axes)
    }

    pub(crate) fn generate_hilbert_to_coords_lut() where DM::Dilated: std::fmt::Display {
        match D {
            2 => Self::generate_hilbert_to_coords_lut_internal::<{1 << 2}, {2 * (1 << (2 - 1))}>(),
            3 => Self::generate_hilbert_to_coords_lut_internal::<{1 << 3}, {3 * (1 << (3 - 1))}>(),
            4 => Self::generate_hilbert_to_coords_lut_internal::<{1 << 4}, {4 * (1 << (4 - 1))}>(),
            5 => Self::generate_hilbert_to_coords_lut_internal::<{1 << 5}, {5 * (1 << (5 - 1))}>(),
            _ => unimplemented!()
        }
    }

    pub(crate) fn generate_hilbert_to_coords_lut_internal<const NUM_CHILDREN: usize, const NUM_TRANSFORMS: usize>() where DM::Dilated: std::fmt::Display {
        let lower_mask = DM::Dilated::one().shl(D).sub(DM::Dilated::one());

        let mut num_transforms = 0;
        let mut transform_map = [[None; D]; NUM_CHILDREN];
        let mut transforms = [[(0, DM::Dilated::zero(), DM::Dilated::zero(), 0, [0; NUM_CHILDREN]); NUM_CHILDREN]; NUM_TRANSFORMS];

        let mut num_flip_axes = 0;
        let mut flip_axes_map = [None; NUM_CHILDREN];

        // Precalculate initial transforms
        // This forces the first few transforms to be ordered such that we know which we
        // should start on for a given order value in the walk methods
//        for i in 0..D {
//            let rotate_amount = (D - 1) - i;
//
//            // Store ID of this transform
//            let tx_id = transform_map[0][rotate_amount].unwrap_or_else(|| { num_transforms += 1; num_transforms - 1 });
//            transform_map[0][rotate_amount] = Some(tx_id);
//
//
//        }

        let num_rotations = D;
        let num_axis_flips = 1 << (D - 1);

        println!("");
        println!("D: {}", D);
        println!("num_rotations: {}", num_rotations);
        println!("num_axis_flips: {}", num_axis_flips);

        // Enumerate all possible axis flips
        // This forces the ordering of flip IDs to be known values
        for i in 0..NUM_CHILDREN {
            let flip_axes = axis_transform(DM::Dilated::from_usize(i));
            let flip_id = flip_axes_map[flip_axes.to_usize()].unwrap_or_else(|| { num_flip_axes += 1; num_flip_axes - 1 });
            flip_axes_map[flip_axes.to_usize()] = Some(flip_id);
        }

        // Enumerate all possible transforms
        // This forces the order of transform indices to be known values
        for i in 0..NUM_CHILDREN {
            for rotate_amount in 0..D {
                // Find initial flip and rotate for index partial i (note xor of previous flip_axes is not required here, but previous rotation is)
                let flip_axes = shl_cyclic::<_, D>(axis_transform(DM::Dilated::from_usize(i)), rotate_amount, lower_mask);
                let rotate_amount = (rotation_transform(i) + rotate_amount + 1) % D;

                let flip_id = flip_axes_map[flip_axes.to_usize()].unwrap();

                let tx_id_test = rotate_amount * num_axis_flips + flip_id;

                // Store ID of this transform
                if transform_map[flip_axes.to_usize()][rotate_amount].is_none() {
                    num_transforms += 1;
                }
                transform_map[flip_axes.to_usize()][rotate_amount] = Some(tx_id_test);
            }
        }
        assert_eq!(num_transforms, NUM_TRANSFORMS);

        // Iterate all possible transforms
        for rotate_amount in 0..D {
            for i in 0..NUM_CHILDREN {
                // Find initial flip and rotate for index partial i (note xor of previous flip_axes is not required here, but previous rotation is)
                let flip_axes = shl_cyclic::<_, D>(axis_transform(DM::Dilated::from_usize(i)), rotate_amount, lower_mask);
                let rotate_amount = (rotation_transform(i) + rotate_amount + 1) % D;

                // ID of this transform
                let tx_id = transform_map[flip_axes.to_usize()][rotate_amount].unwrap();

                // Within this transform, it's possible to decend to a number of other transforms depending on the index partial j
                for j in 0..NUM_CHILDREN {
                    // Store resultant morton partial and hilbert partial (to coords and from coords)
                    transforms[tx_id][j].1 = flip_axes.bit_xor(shl_cyclic::<_, D>(gray(DM::Dilated::from_usize(j)), rotate_amount, lower_mask));
                    transforms[tx_id][j].2 = gray_inverse::<_, D>(shr_cyclic::<_, D>(flip_axes.bit_xor(DM::Dilated::from_usize(j)), rotate_amount, lower_mask));

                    transforms[tx_id][j].4[transforms[tx_id][j].3] = i;
                    transforms[tx_id][j].3 += 1;

                    // To find what the next transform would be, we flip and rotate again
                    let flip_axes = flip_axes.bit_xor(shl_cyclic::<_, D>(axis_transform(DM::Dilated::from_usize(j)), rotate_amount, lower_mask));
                    let rotate_amount = (rotation_transform(j) + rotate_amount + 1) % D;

                    // Cache next transform ID
                    transforms[tx_id][j].0 = transform_map[flip_axes.to_usize()][rotate_amount].unwrap();
                }
            }
        }

        println!("num_transforms: {}", num_transforms);
        println!("");

        let binary = false;
        if binary {
            print!("  hibert index: ");
            for i in 0..NUM_CHILDREN {
                print!("{:7b} ", i);
            }
            println!("");
            for i in 0..num_transforms {
                print!("    tx {:7b}: ", i);
                for j in 0..NUM_CHILDREN {
                    let lut_data = transforms[i][j];
                    print!("{:7b} ", lut_data.0 % num_axis_flips);
                }
                println!("");
            }
        } else {
            print!("|    hibert_index -> | ");
            for i in 0..NUM_CHILDREN {
                print!("{:2} | ", i);
            }
            println!("");
            print!("| ------------------ | ");
            for _ in 0..NUM_CHILDREN {
                print!("-- | ");
            }
            println!("");
            for i in 0..num_transforms {
                print!("| transform_index {:2} | ", i);
                for j in 0..NUM_CHILDREN {
                    let lut_data = transforms[i][j];
                    print!("{:2} | ", lut_data.0 / num_axis_flips);
                }
                println!("");
            }
        }

        /*
        println!("pub const TRANSFORM_LUT_D{}: [[u8; {}]; {}] = [", D, NUM_CHILDREN, num_transforms);
        for i in 0..num_transforms {
            print!("    [");
            for j in 0..(NUM_CHILDREN - 1) {
                let lut_data = transforms[i][j];
                print!("{}, ", lut_data.0);
            }
            let lut_data = transforms[i][NUM_CHILDREN - 1];
            println!("{}],", lut_data.0);
        }
        println!("];\n");

        println!("pub const TX_MORTON_LUT_D{}: [[(u8, u8); {}]; {}] = [", D, NUM_CHILDREN, num_transforms);
        for i in 0..num_transforms {
            print!("    [");
            for j in 0..(NUM_CHILDREN - 1) {
                let lut_data = transforms[i][j];
                print!("({}, {}), ", lut_data.0, lut_data.1);
            }
            let lut_data = transforms[i][NUM_CHILDREN - 1];
            println!("({}, {})],", lut_data.0, lut_data.1);
        }
        println!("];\n");

        println!("pub const MORTON_LUT_D{}: [[u8; {}]; {}] = [", D, NUM_CHILDREN, num_transforms);
        for i in 0..num_transforms {
            print!("    [");
            for j in 0..(NUM_CHILDREN - 1) {
                let lut_data = transforms[i][j];
                print!("{}, ", lut_data.1);
            }
            let lut_data = transforms[i][NUM_CHILDREN - 1];
            println!("{}],", lut_data.1);
        }
        println!("];\n");

        println!("pub const HILBERT_LUT_D{}: [[u8; {}]; {}] = [", D, NUM_CHILDREN, num_transforms);
        for i in 0..num_transforms {
            print!("    [");
            for j in 0..(NUM_CHILDREN - 1) {
                let lut_data = transforms[i][j];
                print!("{}, ", lut_data.2);
            }
            let lut_data = transforms[i][NUM_CHILDREN - 1];
            println!("{}],", lut_data.2);
        }
        println!("];\n");*/
    }
}

impl<DM, const D: usize> SpaceFillingCurve<D> for Hilbert<DM, D>
where
    // When https://github.com/rust-lang/rust/issues/52662 is available, we can clean this up
    DM: DilationMethod,
    DM::Undilated: Coord,
    DM::Dilated: Index,
{
    type Coord = DM::Undilated;
    type Index = DM::Dilated;
    const COORD_MAX: Self::Coord = DM::UNDILATED_MAX;
    const INDEX_MAX: Self::Index = DM::DILATED_MASK;
    const D: usize = D;

    #[inline]
    fn from_index(index: Self::Index) -> Self {
        debug_assert!(
            index <= Self::INDEX_MAX,
            "Parameter 'index' exceeds maximum"
        );
        Self(index)
    }

    #[inline(never)]
    fn from_coords(coords: [Self::Coord; D]) -> Self {
        let lower_mask = Self::Index::one().shl(D).sub(Self::Index::one());
        let morton_index = Morton::<DM, D>::from_coords(coords).index();
        let mut hilbert_index = Self::Index::zero();
        if D < 6 {
            Self::walk_static_lut(morton_index, 0, lower_mask, |transform, morton_partial, shift| {
                let hilbert_partial = Self::Index::from_u8(match D {
                    2 => static_lut::HILBERT_LUT_D2[transform][morton_partial.to_usize()],
                    3 => static_lut::HILBERT_LUT_D3[transform][morton_partial.to_usize()],
                    4 => static_lut::HILBERT_LUT_D4[transform][morton_partial.to_usize()],
                    5 => static_lut::HILBERT_LUT_D5[transform][morton_partial.to_usize()],
                    _ => unreachable!()
                });
                hilbert_index = hilbert_index.bit_or(hilbert_partial.shl(shift));
                hilbert_partial
            });
        } else {
            Self::walk(morton_index, 0, lower_mask, |morton_partial, shift, rotate_amount, flip_axes| {
                let hilbert_partial = gray_inverse::<_, D>(shr_cyclic::<_, D>(flip_axes.bit_xor(morton_partial), rotate_amount, lower_mask));
                hilbert_index = hilbert_index.bit_or(hilbert_partial.shl(shift));
                hilbert_partial
            });
        }
        Self(hilbert_index)
    }

    #[inline(never)]
    fn coords(&self) -> [Self::Coord; D] {
        let lower_mask = Self::Index::one().shl(D).sub(Self::Index::one());
        let mut morton_index = Self::Index::zero();
        if D < 6 {
            Self::walk_static_lut(self.0, 0, lower_mask, |transform, hilbert_partial, shift| {
                let morton_partial = Self::Index::from_u8(match D {
                    2 => static_lut::MORTON_LUT_D2[transform][hilbert_partial.to_usize()],
                    3 => static_lut::MORTON_LUT_D3[transform][hilbert_partial.to_usize()],
                    4 => static_lut::MORTON_LUT_D4[transform][hilbert_partial.to_usize()],
                    5 => static_lut::MORTON_LUT_D5[transform][hilbert_partial.to_usize()],
                    _ => unreachable!()
                });
                morton_index = morton_index.bit_or(morton_partial.shl(shift));
                hilbert_partial
            });
        } else {
            Self::walk(self.0, 0, lower_mask, |hilbert_partial, shift, rotate_amount, flip_axes| {
                let morton_partial = flip_axes.bit_xor(shl_cyclic::<_, D>(gray(hilbert_partial), rotate_amount, lower_mask));
                morton_index = morton_index.bit_or(morton_partial.shl(shift));
                hilbert_partial
            });
        }
        Morton::<DM, D>::from_index(morton_index).coords()
    }

    #[inline]
    fn index(&self) -> Self::Index {
        self.0
    }
}

impl<DM, const D: usize> Siblings<D> for Hilbert<DM, D>
where
    // When https://github.com/rust-lang/rust/issues/52662 is available, we can clean this up
    DM: DilationMethod,
    DM::Undilated: Coord,
    DM::Dilated: Index,
{
    fn sibling_on_axis(&self, axis: usize) -> Self {
        todo!();
//        let lower_mask = Self::Index::one().shl(D).sub(Self::Index::one());
//        let morton_index = Morton::<DM, D>::from_coords(coords).index();
//        let mut hilbert_index = Self::Index::zero();
//        let (rotate_amount, flip_axes) = Self::walk(self.0, 1, lower_mask, |p, _, _, _| p);
//
//        // We might be able to speed this up by transforming the axis mask somehow
//        let mut hilbert_partial = self.0.bit_and(lower_mask);
//        let mut morton_partial = flip_axes.bit_xor(shl_cyclic::<_, D>(gray(hilbert_partial), rotate_amount, lower_mask));
//        morton_partial = morton_partial.bit_xor(Self::Index::one().shl(axis));
//        hilbert_partial = gray_inverse::<_, D>(shr_cyclic::<_, D>(flip_axes.bit_xor(morton_partial), rotate_amount, lower_mask));
//
//        Self(self.0.bit_and(lower_mask.bit_not()).bit_or(hilbert_partial))
    }

    fn sibling_or_same_on_axis(&self, axis: usize, direction: QueryDirection) -> Self {
        todo!()
    }
}

#[cfg(test)]
mod tests {
    extern crate std;

    use crate::internal::tests::{test_curve, test_curve_siblings};

    macro_rules! hilbert_expand {
        ($t:ty, $d:literal) => {
            Hilbert::<Expand<$t, $d>, $d>
        };
    }

    macro_rules! hilbert_fixed {
        ($t:ty, $d:literal) => {
            Hilbert::<Fixed<$t, $d>, $d>
        };
    }

    #[test]
    fn test_gray() {
        for i in 0..10000usize {
            let g = super::gray(i);
            assert_eq!(super::gray_inverse::<_, { usize::BITS as usize }>(g), i);
        }
    }

    #[test]
    fn generate_lut() {
        super::Hilbert::<dilate::Expand<u8, 2>, 2>::generate_hilbert_to_coords_lut();
        super::Hilbert::<dilate::Expand<u8, 3>, 3>::generate_hilbert_to_coords_lut();
        super::Hilbert::<dilate::Expand<u8, 4>, 4>::generate_hilbert_to_coords_lut();
        super::Hilbert::<dilate::Expand<u8, 5>, 5>::generate_hilbert_to_coords_lut();
    }

    test_curve!(hilbert_expand, true, u8, 2, 3, 4, 5, 6, 7, 8);
    test_curve!(hilbert_expand, true, u16, 2, 3, 4, 5, 6, 7, 8);
    test_curve!(hilbert_expand, true, u32, 2, 3, 4);
    test_curve!(hilbert_expand, true, u64, 2);

    test_curve!(hilbert_fixed, true, u8, 2, 3, 4);
    test_curve!(hilbert_fixed, true, u16, 2, 3, 4, 5, 6, 7, 8);
    test_curve!(hilbert_fixed, true, u32, 2, 3, 4, 5, 6, 7, 8);
    test_curve!(hilbert_fixed, true, u64, 2, 3, 4, 5, 6, 7, 8);
    test_curve!(hilbert_fixed, true, u128, 2, 3, 4, 5, 6, 7, 8);

//    test_curve_siblings!(hilbert_expand, true, u8, 2, 3, 4, 5, 6, 7, 8);
//    test_curve_siblings!(hilbert_expand, true, u16, 2, 3, 4, 5, 6, 7, 8);
//    test_curve_siblings!(hilbert_expand, true, u32, 2, 3, 4);
//    test_curve_siblings!(hilbert_expand, true, u64, 2);
//
//    test_curve_siblings!(hilbert_fixed, true, u8, 2, 3, 4);
//    test_curve_siblings!(hilbert_fixed, true, u16, 2, 3, 4, 5, 6, 7, 8);
//    test_curve_siblings!(hilbert_fixed, true, u32, 2, 3, 4, 5, 6, 7, 8);
//    test_curve_siblings!(hilbert_fixed, true, u64, 2, 3, 4, 5, 6, 7, 8);
//    test_curve_siblings!(hilbert_fixed, true, u128, 2, 3, 4, 5, 6, 7, 8);
}
